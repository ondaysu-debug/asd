#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã CMC DEX API v4 —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ network_slug –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–∏–µ —Å–ª–æ–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –¥–∞–Ω–Ω—ã–µ.
"""
import os
import sys
from dotenv import load_dotenv

# Add workspace to path
sys.path.insert(0, '/workspace')

from wakebot.config import Config
from wakebot.net_http import HttpClient


def test_all_networks():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö —Å–ª–æ–≥–æ–≤"""
    load_dotenv()
    cfg = Config.load()
    http = HttpClient(cfg)
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_slugs = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ç–∏
        "ethereum", "bsc", "base", "solana",
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è BSC
        "bnb-chain", "bnb", "binance-smart-chain", "binance",
        # –î—Ä—É–≥–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ç–∏
        "polygon", "matic", "arbitrum", "optimism",
        "avalanche", "fantom", "cronos",
    ]
    
    working_slugs = {}
    failed_slugs = {}
    
    print("=" * 80)
    print("CMC DEX API v4 Network Slug Testing")
    print("=" * 80)
    print(f"API Base: {cfg.cmc_dex_base}")
    print(f"API Key: {'‚úì Set' if cfg.cmc_api_key else '‚úó Missing'}")
    print("=" * 80)
    
    for slug in test_slugs:
        print(f"\nüß™ Testing: {slug}")
        url = f"{cfg.cmc_dex_base}/spot-pairs/latest?network_slug={slug}&limit=2"
        
        try:
            doc = http.cmc_get_json(url, timeout=10.0) or {}
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
            status = doc.get("status", {})
            error_code = status.get("error_code")
            
            if error_code and error_code != 0:
                error_msg = status.get("error_message", "Unknown error")
                print(f"‚ùå {slug}: {error_msg}")
                failed_slugs[slug] = error_msg
            else:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                data = doc.get("data")
                if isinstance(data, list):
                    print(f"‚úÖ {slug}: SUCCESS - {len(data)} items (data is list)")
                    if data:
                        first_item = data[0]
                        print(f"   First item type: {type(first_item)}")
                        if isinstance(first_item, dict):
                            print(f"   First item keys: {list(first_item.keys())[:10]}")
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π
                            has_id = "id" in first_item or "pool_id" in first_item
                            has_base = "base_address" in first_item or "base" in first_item
                            has_quote = "quote_address" in first_item or "quote" in first_item
                            print(f"   Has ID: {has_id}, Has Base: {has_base}, Has Quote: {has_quote}")
                    working_slugs[slug] = len(data)
                elif isinstance(data, dict):
                    print(f"‚ö†Ô∏è  {slug}: Data is dict (unexpected), keys: {list(data.keys())}")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Å–ø–∏—Å–æ–∫ –∏–∑ dict
                    items = data.get("items") or data.get("pairs") or data.get("list") or []
                    if items:
                        print(f"   Found {len(items)} items in nested structure")
                        working_slugs[slug] = len(items)
                    else:
                        failed_slugs[slug] = "Data is dict without items"
                else:
                    print(f"‚ùå {slug}: Data is {type(data)} (expected list)")
                    failed_slugs[slug] = f"Data type: {type(data)}"
                
        except Exception as e:
            print(f"‚ùå {slug}: EXCEPTION - {type(e).__name__}: {e}")
            failed_slugs[slug] = str(e)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 80)
    print("üìä SUMMARY")
    print("=" * 80)
    
    if working_slugs:
        print(f"\n‚úÖ Working slugs ({len(working_slugs)}):")
        for slug, count in sorted(working_slugs.items()):
            print(f"   ‚Ä¢ {slug:30s} ‚Üí {count} items")
    else:
        print("\n‚ùå No working slugs found!")
    
    if failed_slugs:
        print(f"\n‚ùå Failed slugs ({len(failed_slugs)}):")
        for slug, reason in sorted(failed_slugs.items()):
            print(f"   ‚Ä¢ {slug:30s} ‚Üí {reason}")
    
    print("\n" + "=" * 80)
    print("Recommended config.py chain_slugs mapping:")
    print("=" * 80)
    if working_slugs:
        print("\ncfg.chain_slugs = {")
        # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ç–µ–π
        for chain_name in ["ethereum", "bsc", "base", "solana", "polygon"]:
            # –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å–ª–æ–≥ –¥–ª—è —ç—Ç–æ–π —Å–µ—Ç–∏
            candidates = [s for s in working_slugs.keys() if chain_name in s or s in chain_name]
            if candidates:
                print(f'    "{chain_name}": "{candidates[0]}",')
        print("}")
    
    return working_slugs, failed_slugs


def test_ohlcv_endpoint(network_slug: str, pair_address: str):
    """–¢–µ—Å—Ç OHLCV endpoint –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã"""
    load_dotenv()
    cfg = Config.load()
    http = HttpClient(cfg)
    
    print(f"\nüß™ Testing OHLCV for {network_slug}/{pair_address}")
    url = f"{cfg.cmc_dex_base}/pairs/ohlcv/latest?network_slug={network_slug}&contract_address={pair_address}&interval=1h&limit=25"
    print(f"URL: {url}")
    
    try:
        doc = http.cmc_get_json(url, timeout=10.0) or {}
        
        status = doc.get("status", {})
        error_code = status.get("error_code")
        
        if error_code and error_code != 0:
            error_msg = status.get("error_message", "Unknown error")
            print(f"‚ùå OHLCV Error: {error_msg}")
        else:
            print(f"‚úÖ OHLCV Success")
            print(f"   Response keys: {list(doc.keys())}")
            data = doc.get("data", {})
            if isinstance(data, dict):
                attrs = data.get("attributes", {})
                candles = attrs.get("candles", [])
                print(f"   Candles count: {len(candles)}")
                if candles:
                    print(f"   First candle: {candles[0]}")
                    print(f"   Last candle: {candles[-1]}")
    except Exception as e:
        print(f"‚ùå OHLCV Exception: {type(e).__name__}: {e}")


if __name__ == "__main__":
    working, failed = test_all_networks()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å–µ—Ç–∏, –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º OHLCV
    if "ethereum" in working:
        # –ü—Ä–∏–º–µ—Ä –∞–¥—Ä–µ—Å–∞ –ø–∞—Ä—ã –Ω–∞ Ethereum (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
        test_ohlcv_endpoint("ethereum", "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640")
